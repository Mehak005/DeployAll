{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mehak\\\\OneDrive\\\\Desktop\\\\DeployAll\\\\React.app\\\\src\\\\TableView.js\",\n  _s = $RefreshSig$();\n/**\r\n * TableView Component\r\n *\r\n * This component displays a table of student profiles using TanStack Table.\r\n * Users can:\r\n * - View profiles in a structured table format.\r\n * - Edit profiles via a modal form.\r\n * - Delete profiles directly from the table.\r\n * - Supports dark mode for better visibility.\r\n */\n\nimport React from \"react\"; // Import React\nimport { useReactTable, getCoreRowModel, flexRender } from \"@tanstack/react-table\"; // Import TanStack Table for dynamic rendering\nimport \"bootstrap/dist/css/bootstrap.min.css\"; // Import Bootstrap for table styling\n\n/**\r\n * TableView Component\r\n *\r\n * Props:\r\n * @param {Array} profiles - List of student profiles.\r\n * @param {Function} onEdit - Function to handle profile editing.\r\n * @param {Function} onDelete - Function to delete a profile.\r\n * @param {Function} setShowModal - Function to control the ProfileForm modal visibility.\r\n * @param {Boolean} darkMode - Determines if dark mode is enabled.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TableView({\n  profiles,\n  onEdit,\n  onDelete,\n  setShowModal,\n  darkMode\n}) {\n  _s();\n  /**\r\n   * Column Definitions for the Table\r\n   * Each column represents a field in the profile.\r\n   */\n  const columns = [{\n    header: \"ID\",\n    accessorKey: \"id\"\n  },\n  // Unique identifier for each profile\n  {\n    header: \"Name\",\n    accessorKey: \"name\"\n  },\n  // Displays student name\n  {\n    header: \"Favorite Color\",\n    accessorKey: \"favouriteColor\"\n  },\n  // Displays favorite color\n  {\n    header: \"Favorite Food\",\n    accessorKey: \"favouriteFood\"\n  },\n  // Displays favorite food\n  {\n    header: \"Likes\",\n    accessorKey: \"likes\"\n  },\n  // Displays the number of likes\n  {\n    header: \"Actions\",\n    accessorKey: \"actions\",\n    /**\r\n     * Renders action buttons for each row:\r\n     * - Edit: Opens modal to edit the selected profile.\r\n     * - Delete: Removes the selected profile.\r\n     */\n    cell: ({\n      row\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-warning btn-sm mx-1\",\n        onClick: () => {\n          onEdit(row.original); // Pass the selected profile to the editing function\n          setShowModal(true); // Open the modal form for editing\n        },\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger btn-sm\",\n        onClick: () => onDelete(row.original.id) // Call delete function for this profile\n        ,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }];\n\n  /**\r\n   * Initializes the TanStack Table instance with:\r\n   * - `data`: Profile list.\r\n   * - `columns`: Column definitions.\r\n   * - `getCoreRowModel`: Generates the table row structure.\r\n   */\n  const table = useReactTable({\n    data: profiles,\n    columns,\n    getCoreRowModel: getCoreRowModel()\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-responsive\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: `table table-striped table-bordered ${darkMode ? \"table-dark\" : \"table-light\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: table.getHeaderGroups().map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: headerGroup.headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: flexRender(header.column.columnDef.header, header.getContext())\n          }, header.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this))\n        }, headerGroup.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: table.getRowModel().rows.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.getVisibleCells().map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: flexRender(cell.column.columnDef.cell, cell.getContext())\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this))\n        }, row.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(TableView, \"+qfJc9U8evODZQ8bBg9G2KVouAc=\", false, function () {\n  return [useReactTable];\n});\n_c = TableView;\nexport default TableView;\nvar _c;\n$RefreshReg$(_c, \"TableView\");","map":{"version":3,"names":["React","useReactTable","getCoreRowModel","flexRender","jsxDEV","_jsxDEV","TableView","profiles","onEdit","onDelete","setShowModal","darkMode","_s","columns","header","accessorKey","cell","row","children","className","onClick","original","fileName","_jsxFileName","lineNumber","columnNumber","id","table","data","getHeaderGroups","map","headerGroup","headers","column","columnDef","getContext","getRowModel","rows","getVisibleCells","_c","$RefreshReg$"],"sources":["C:/Users/mehak/OneDrive/Desktop/DeployAll/React.app/src/TableView.js"],"sourcesContent":["/**\r\n * TableView Component\r\n *\r\n * This component displays a table of student profiles using TanStack Table.\r\n * Users can:\r\n * - View profiles in a structured table format.\r\n * - Edit profiles via a modal form.\r\n * - Delete profiles directly from the table.\r\n * - Supports dark mode for better visibility.\r\n */\r\n\r\nimport React from \"react\"; // Import React\r\nimport { useReactTable, getCoreRowModel, flexRender } from \"@tanstack/react-table\"; // Import TanStack Table for dynamic rendering\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"; // Import Bootstrap for table styling\r\n\r\n/**\r\n * TableView Component\r\n *\r\n * Props:\r\n * @param {Array} profiles - List of student profiles.\r\n * @param {Function} onEdit - Function to handle profile editing.\r\n * @param {Function} onDelete - Function to delete a profile.\r\n * @param {Function} setShowModal - Function to control the ProfileForm modal visibility.\r\n * @param {Boolean} darkMode - Determines if dark mode is enabled.\r\n */\r\nfunction TableView({ profiles, onEdit, onDelete, setShowModal, darkMode }) {\r\n\r\n  /**\r\n   * Column Definitions for the Table\r\n   * Each column represents a field in the profile.\r\n   */\r\n  const columns = [\r\n    { header: \"ID\", accessorKey: \"id\" }, // Unique identifier for each profile\r\n    { header: \"Name\", accessorKey: \"name\" }, // Displays student name\r\n    { header: \"Favorite Color\", accessorKey: \"favouriteColor\" }, // Displays favorite color\r\n    { header: \"Favorite Food\", accessorKey: \"favouriteFood\" }, // Displays favorite food\r\n    { header: \"Likes\", accessorKey: \"likes\" }, // Displays the number of likes\r\n    {\r\n      header: \"Actions\",\r\n      accessorKey: \"actions\",\r\n      /**\r\n       * Renders action buttons for each row:\r\n       * - Edit: Opens modal to edit the selected profile.\r\n       * - Delete: Removes the selected profile.\r\n       */\r\n      cell: ({ row }) => (\r\n        <div>\r\n          <button\r\n            className=\"btn btn-warning btn-sm mx-1\"\r\n            onClick={() => {\r\n              onEdit(row.original); // Pass the selected profile to the editing function\r\n              setShowModal(true); // Open the modal form for editing\r\n            }}\r\n          >\r\n            Edit\r\n          </button>\r\n          <button\r\n            className=\"btn btn-danger btn-sm\"\r\n            onClick={() => onDelete(row.original.id)} // Call delete function for this profile\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  /**\r\n   * Initializes the TanStack Table instance with:\r\n   * - `data`: Profile list.\r\n   * - `columns`: Column definitions.\r\n   * - `getCoreRowModel`: Generates the table row structure.\r\n   */\r\n  const table = useReactTable({\r\n    data: profiles,\r\n    columns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n  });\r\n\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      {/* Render Table with Dark Mode Support */}\r\n      <table className={`table table-striped table-bordered ${darkMode ? \"table-dark\" : \"table-light\"}`}>\r\n\r\n        {/* Table Header */}\r\n        <thead>\r\n          {table.getHeaderGroups().map((headerGroup) => (\r\n            <tr key={headerGroup.id}>\r\n              {headerGroup.headers.map((header) => (\r\n                <th key={header.id}>\r\n                  {flexRender(header.column.columnDef.header, header.getContext())}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n\r\n        {/* Table Body */}\r\n        <tbody>\r\n          {table.getRowModel().rows.map((row) => (\r\n            <tr key={row.id}>\r\n              {row.getVisibleCells().map((cell) => (\r\n                <td key={cell.id}>\r\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TableView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}